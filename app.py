import os
import json
import hashlib
import uuid
import zipfile
from flask import Flask, render_template_string, request, redirect, url_for, send_from_directory, flash, session, \
    send_file
from werkzeug.utils import secure_filename

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'pdf', 'doc', 'docx', 'ppt', 'pptx', 'txt', 'zip', 'jpg', 'png', 'jpeg', 'mp4'}
TEACHER_FILE = 'teacher.json'
PENDING_FILE = 'pending_teachers.json'
DB_FILE = 'lessons.json'

ADMIN_PASSWORD = os.environ.get('ADMIN_PASSWORD', 'admin123')

app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'school_library_secret_2024')
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = 50 * 1024 * 1024  # 50 –ú–ë

os.makedirs(UPLOAD_FOLDER, exist_ok=True)


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


def get_file_type(filename):
    ext = filename.rsplit('.', 1)[1].lower()
    if ext in ['jpg', 'jpeg', 'png']:
        return 'image'
    elif ext == 'pdf':
        return 'pdf'
    elif ext in ['txt']:
        return 'text'
    elif ext == 'mp4':
        return 'video'
    else:
        return 'other'


def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()


def load_teacher():
    if not os.path.exists(TEACHER_FILE):
        return None
    try:
        with open(TEACHER_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return None


def save_teacher(username, password_hash):
    with open(TEACHER_FILE, 'w', encoding='utf-8') as f:
        json.dump({"username": username, "password_hash": password_hash}, f)


def load_pending():
    if not os.path.exists(PENDING_FILE):
        return []
    try:
        with open(PENDING_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return []


def save_pending(pending_list):
    with open(PENDING_FILE, 'w', encoding='utf-8') as f:
        json.dump(pending_list, f, ensure_ascii=False, indent=2)


def load_lessons():
    if not os.path.exists(DB_FILE):
        return []
    try:
        with open(DB_FILE, 'r', encoding='utf-8') as f:
            content = f.read().strip()
            if not content:
                return []
            return json.loads(content)
    except (json.JSONDecodeError, IOError):
        return []


def save_lessons(lessons):
    with open(DB_FILE, 'w', encoding='utf-8') as f:
        json.dump(lessons, f, ensure_ascii=False, indent=2)


# === –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã ===
def teacher_required(f):
    def wrapper(*args, **kwargs):
        if 'teacher_logged_in' not in session:
            flash("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ —É—á–∏—Ç–µ–ª—è.", "error")
            return redirect(url_for('teacher_login'))
        return f(*args, **kwargs)

    wrapper.__name__ = f.__name__
    return wrapper


def admin_required(f):
    def wrapper(*args, **kwargs):
        if 'admin_logged_in' not in session:
            flash("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", "error")
            return redirect(url_for('admin_login'))
        return f(*args, **kwargs)

    wrapper.__name__ = f.__name__
    return wrapper


# === PWA: manifest.json ===
@app.route('/manifest.json')
def manifest():
    return {
        "name": "–®–∫–æ–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞",
        "short_name": "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞",
        "start_url": "/",
        "display": "standalone",
        "background_color": "#f8f9fa",
        "theme_color": "#4285f4",
        "icons": [{
            "src": "/static/icon-192.png",
            "sizes": "192x192",
            "type": "image/png"
        }]
    }


# === –ë–∞–∑–æ–≤—ã–π HTML-—à–∞–±–ª–æ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã ===
BASE_TEMPLATE = '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ page_title }}</title>
    <link rel="manifest" href="/manifest.json">
    <meta name="theme-color" content="#4285f4">
    <style>
        :root {
            --bg: #ffffff;
            --card-bg: #ffffff;
            --text: #202124;
            --text-light: #5f6368;
            --border: #dadce0;
            --primary: #4285f4;
            --primary-dark: #3367d6;
            --success: #34a853;
            --error: #ea4335;
        }
        [data-theme="dark"] {
            --bg: #121212;
            --card-bg: #1e1e1e;
            --text: #e8eaed;
            --text-light: #9aa0a6;
            --border: #3c4043;
            --primary: #8ab4f8;
            --primary-dark: #7f9ed6;
            --success: #81c995;
            --error: #f28b82;
        }
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            background-color: var(--bg);
            color: var(--text);
            font-family: 'Roboto', Arial, sans-serif;
            line-height: 1.6;
            padding-bottom: 40px;
            transition: background-color 0.3s, color 0.3s;
        }
        .container {
            max-width: 900px;
            margin: 0 auto;
            padding: 0 20px;
        }
        header {
            background: var(--primary);
            color: white;
            padding: 24px 0;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        header h1 {
            font-weight: 500;
            font-size: 28px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 12px;
        }
        .logo {
            font-size: 28px;
        }
        .content {
            margin-top: 30px;
        }
        .card {
            background: var(--card-bg);
            border: 1px solid var(--border);
            border-radius: 12px;
            padding: 24px;
            margin-bottom: 24px;
            transition: transform 0.2s, box-shadow 0.2s;
        }
        .btn {
            display: inline-block;
            background: var(--primary);
            color: white;
            text-decoration: none;
            padding: 10px 20px;
            border-radius: 6px;
            font-weight: 500;
            transition: background 0.2s;
            border: none;
            cursor: pointer;
            font-size: 15px;
        }
        .btn:hover {
            background: var(--primary-dark);
        }
        .btn-download {
            background: var(--success);
        }
        .alert {
            padding: 14px 18px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-weight: 500;
        }
        .alert-success {
            background: #e6f4ea;
            color: #137333;
            border: 1px solid #8fd694;
        }
        [data-theme="dark"] .alert-success {
            background: #1e3a2a;
            border-color: #3a5a40;
        }
        .alert-error {
            background: #fce8e6;
            color: #c5221f;
            border: 1px solid #f28b82;
        }
        [data-theme="dark"] .alert-error {
            background: #3a1e1e;
            border-color: #5a3a3a;
        }
        .form-control {
            width: 100%;
            padding: 12px;
            border: 1px solid var(--border);
            border-radius: 8px;
            font-size: 15px;
            background: var(--card-bg);
            color: var(--text);
        }
        footer {
            text-align: center;
            margin-top: 40px;
            color: var(--text-light);
            font-size: 14px;
        }
        @media (max-width: 600px) {
            .btn {
                width: 100%;
                padding: 12px;
            }
        }
    </style>
</head>
<body data-theme="{{ 'dark' if dark_mode else 'light' }}">
    <header>
        <div class="container">
            <h1><span class="logo">üìö</span> {{ page_title }}</h1>
        </div>
    </header>

    <div class="container">
        <div class="content">
            {% with messages = get_flashed_messages(with_categories=true) %}
                {% if messages %}
                    {% for category, message in messages %}
                        <div class="alert alert-{{ 'success' if category == 'message' else 'error' }}">
                            {{ message }}
                        </div>
                    {% endfor %}
                {% endif %}
            {% endwith %}

            {{ content_html | safe }}
        </div>
    </div>

    <footer class="container">
        <p>–®–∫–æ–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞</p>
    </footer>

    <script>
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        if (localStorage.theme === 'dark' || 
            (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
            document.body.setAttribute('data-theme', 'dark');
        } else {
            document.body.setAttribute('data-theme', 'light');
        }
    </script>
</body>
</html>
'''


def render_page(page_title, content_html):
    dark_mode = session.get('dark_mode', False)
    return render_template_string(BASE_TEMPLATE, page_title=page_title, content_html=content_html, dark_mode=dark_mode)


# === –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–æ–∏—Å–∫–æ–º –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π ===
@app.route('/')
def index():
    query = request.args.get('q', '').strip().lower()
    subject_filter = request.args.get('subject', '').strip()

    lessons = load_lessons()

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    filtered = []
    for lesson in lessons:
        title_match = query in lesson['title'].lower() or query in lesson.get('description', '').lower()
        subject_match = (not subject_filter) or lesson.get('subject') == subject_filter
        if title_match and subject_match:
            filtered.append(lesson)

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    subjects = sorted(set(lesson.get('subject', '–î—Ä—É–≥–æ–µ') for lesson in lessons))

    lessons_html = ""
    if filtered:
        for lesson in filtered:
            file_type = get_file_type(lesson['filename'])
            view_url = url_for('view_file', filename=lesson['filename']) if file_type in ['pdf', 'text',
                                                                                          'image'] else '#'
            download_url = url_for('download_file', filename=lesson['filename'])

            lessons_html += f'''
            <div class="card">
                <div style="font-size: 20px; font-weight: 500; margin-bottom: 8px;">{lesson["title"]}</div>
                <div style="color: var(--text-light); margin-bottom: 16px; font-size: 15px;">
                    {lesson.get("description", "")}
                    <br><small>üìÅ {lesson.get("subject", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")} ‚Ä¢ üì• {lesson.get("downloads", 0)} —Å–∫–∞—á–∏–≤–∞–Ω–∏–π</small>
                </div>
                <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                    <a href="{download_url}" class="btn btn-download">üì• –°–∫–∞—á–∞—Ç—å</a>
                    {'<a href="' + view_url + '" class="btn" target="_blank">üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å</a>' if file_type in ['pdf', 'text', 'image'] else ''}
                </div>
            </div>
            '''
    else:
        lessons_html = '<div class="card"><p style="text-align: center; color: var(--text-light);">üì≠ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p></div>'

    # –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞
    filters_html = f'''
    <div class="card" style="margin-bottom: 20px;">
        <form method="GET" style="display: flex; gap: 10px; flex-wrap: wrap; align-items: end;">
            <div style="flex: 1; min-width: 200px;">
                <label>–ü–æ–∏—Å–∫</label>
                <input type="text" name="q" value="{query}" class="form-control" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ...">
            </div>
            <div style="min-width: 150px;">
                <label>–ü—Ä–µ–¥–º–µ—Ç</label>
                <select name="subject" class="form-control">
                    <option value="">–í—Å–µ</option>
                    {" ".join(f'<option value="{s}" {"selected" if s == subject_filter else ""}>{s}</option>' for s in subjects)}
                </select>
            </div>
            <div style="align-self: end;">
                <button type="submit" class="btn">üîç –ù–∞–π—Ç–∏</button>
            </div>
        </form>
    </div>
    '''

    content = filters_html + lessons_html + '''
    <div style="text-align: center; margin-top: 20px;">
        <a href="/teacher">üîê –í–æ–π—Ç–∏ –∫–∞–∫ —É—á–∏—Ç–µ–ª—å</a> | 
        <a href="/register">üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É</a>
    </div>
    '''
    return render_page("üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É—Ä–æ–∫–æ–≤", content)


# === –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤ –æ–Ω–ª–∞–π–Ω ===
@app.route('/view/<filename>')
def view_file(filename):
    filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    if not os.path.exists(filepath):
        flash("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", "error")
        return redirect(url_for('index'))

    file_type = get_file_type(filename)

    if file_type == 'pdf':
        content = f'<embed src="/uploads/{filename}" type="application/pdf" width="100%" height="800px">'
    elif file_type == 'text':
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                text = f.read()
            content = f'<pre style="white-space: pre-wrap; font-family: monospace; background: var(--card-bg); padding: 20px; border-radius: 8px;">{text}</pre>'
        except Exception as e:
            content = f'<p>–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}</p>'
    elif file_type == 'image':
        content = f'<img src="/uploads/{filename}" style="max-width: 100%; height: auto; border-radius: 8px;">'
    else:
        return redirect(url_for('download_file', filename=filename))

    return render_page(f"üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä: {filename}",
                       f'<div class="card">{content}</div><p><a href="/">‚Üê –ù–∞–∑–∞–¥ –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ</a></p>')


# === –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å —Å—á—ë—Ç—á–∏–∫–æ–º ===
@app.route('/download/<filename>')
def download_file(filename):
    filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    if not os.path.exists(filepath):
        flash("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", "error")
        return redirect(url_for('index'))

    lessons = load_lessons()
    for lesson in lessons:
        if lesson['filename'] == filename:
            lesson['downloads'] = lesson.get('downloads', 0) + 1
            break
    save_lessons(lessons)

    return send_from_directory(app.config['UPLOAD_FOLDER'], filename, as_attachment=True)


# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
@app.route('/register', methods=['GET', 'POST'])
def register():
    if load_teacher():
        flash("‚úÖ –£—á–∏—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω. –í—Ö–æ–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.", "success")
        return redirect(url_for('teacher_login'))

    if request.method == 'POST':
        username = request.form.get('username', '').strip()
        password = request.form.get('password', '')
        confirm = request.form.get('confirm', '')

        if not username or not password:
            flash("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.", "error")
        elif password != confirm:
            flash("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.", "error")
        elif len(password) < 6:
            flash("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 6 —Å–∏–º–≤–æ–ª–æ–≤.", "error")
        else:
            pending = load_pending()
            if any(t['username'] == username for t in pending):
                flash("‚ÑπÔ∏è –ó–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.", "success")
            else:
                pending.append({
                    "username": username,
                    "password_hash": hash_password(password)
                })
                save_pending(pending)
                flash("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.", "success")
            return redirect(url_for('index'))

    content = '''
    <div class="card">
        <h2>üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</h2>
        <form method="POST">
            <div style="margin-bottom: 16px;">
                <label>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
                <input type="text" name="username" class="form-control" required>
            </div>
            <div style="margin-bottom: 16px;">
                <label>–ü–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤)</label>
                <input type="password" name="password" class="form-control" required>
            </div>
            <div style="margin-bottom: 16px;">
                <label>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
                <input type="password" name="confirm" class="form-control" required>
            </div>
            <button type="submit" class="btn">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</button>
        </form>
    </div>
    '''
    return render_page("üìù –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", content)


# === –í—Ö–æ–¥ —É—á–∏—Ç–µ–ª—è ===
@app.route('/teacher', methods=['GET', 'POST'])
def teacher_login():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        teacher = load_teacher()

        if teacher and teacher['username'] == username and teacher['password_hash'] == hash_password(password):
            session['teacher_logged_in'] = True
            session['teacher_name'] = username
            flash(f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!", "success")
            return redirect(url_for('teacher_upload'))
        else:
            flash("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.", "error")

    content = '''
    <div class="card">
        <h2>üîê –í—Ö–æ–¥ –¥–ª—è —É—á–∏—Ç–µ–ª—è</h2>
        <form method="POST">
            <div style="margin-bottom: 16px;">
                <label>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
                <input type="text" name="username" class="form-control" required>
            </div>
            <div style="margin-bottom: 16px;">
                <label>–ü–∞—Ä–æ–ª—å</label>
                <input type="password" name="password" class="form-control" required>
            </div>
            <button type="submit" class="btn">–í–æ–π—Ç–∏</button>
        </form>
        <p style="margin-top: 16px; text-align: center;">
            <a href="/register">üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É</a>
        </p>
    </div>
    '''
    return render_page("üîê –í—Ö–æ–¥", content)


# === –ê–¥–º–∏–Ω–∫–∞ ===
@app.route('/admin/login', methods=['GET', 'POST'])
def admin_login():
    if request.method == 'POST':
        password = request.form.get('password')
        if password == ADMIN_PASSWORD:
            session['admin_logged_in'] = True
            return redirect(url_for('admin_panel'))
        else:
            flash("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", "error")
    content = '''
    <div class="card">
        <h2>üîê –í—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h2>
        <form method="POST">
            <div style="margin-bottom: 16px;">
                <label>–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</label>
                <input type="password" name="password" class="form-control" required>
            </div>
            <button type="submit" class="btn">–í–æ–π—Ç–∏</button>
        </form>
    </div>
    '''
    return render_page("üîê –ê–¥–º–∏–Ω–∫–∞ ‚Äî –≤—Ö–æ–¥", content)


@app.route('/admin')
@admin_required
def admin_panel():
    pending = load_pending()
    teacher = load_teacher()
    lessons = load_lessons()
    total_files = len(lessons)
    total_downloads = sum(lesson.get('downloads', 0) for lesson in lessons)

    teacher_html = f'<p><strong>{teacher["username"]}</strong></p>' if teacher else '<p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–∏—Ç–µ–ª—è</p>'

    pending_html = ""
    for i, t in enumerate(pending):
        pending_html += f'''
        <div class="card">
            <strong>üë§ {t["username"]}</strong>
            <form method="POST" action="/admin/approve" style="margin-top: 12px;">
                <input type="hidden" name="index" value="{i}">
                <button type="submit" class="btn btn-approve">‚úÖ –û–¥–æ–±—Ä–∏—Ç—å</button>
            </form>
        </div>
        '''

    content = f'''
    <div style="text-align: right; margin-bottom: 16px;">
        <a href="/admin/logout" style="color: var(--error);">–í—ã–π—Ç–∏</a>
    </div>
    <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
    <div class="card">
        <p>üìÅ –í—Å–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {total_files}</p>
        <p>üì• –í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: {total_downloads}</p>
    </div>
    <h2>‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∏—Ç–µ–ª—å</h2>
    <div class="card">{teacher_html}</div>
    <h2>üì• –ó–∞—è–≤–∫–∏</h2>
    {pending_html or '<p>–ù–µ—Ç –∑–∞—è–≤–æ–∫.</p>'}
    '''
    return render_page("üõ†Ô∏è –ê–¥–º–∏–Ω–∫–∞", content)


@app.route('/admin/approve', methods=['POST'])
@admin_required
def approve_teacher():
    index = int(request.form.get('index'))
    pending = load_pending()
    if 0 <= index < len(pending):
        teacher_data = pending.pop(index)
        save_teacher(teacher_data['username'], teacher_data['password_hash'])
        save_pending(pending)
        flash(f"‚úÖ –£—á–∏—Ç–µ–ª—å {teacher_data['username']} –æ–¥–æ–±—Ä–µ–Ω!", "success")
    return redirect(url_for('admin_panel'))


@app.route('/admin/delete-teacher', methods=['POST'])
@admin_required
def delete_teacher():
    try:
        if os.path.exists(TEACHER_FILE):
            os.remove(TEACHER_FILE)
        flash("‚úÖ –£—á–∏—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.", "success")
    except Exception as e:
        flash(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}", "error")
    return redirect(url_for('admin_panel'))


@app.route('/admin/logout')
def admin_logout():
    session.pop('admin_logged_in', None)
    return redirect(url_for('index'))


# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ===
@app.route('/upload', methods=['GET', 'POST'])
@teacher_required
def teacher_upload():
    if request.method == 'POST':
        title = request.form.get('title', '').strip()
        description = request.form.get('description', '').strip()
        subject = request.form.get('subject', '–î—Ä—É–≥–æ–µ').strip()
        file = request.files.get('file')

        if not title or not file or file.filename == '':
            flash("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª.", "error")
        elif not allowed_file(file.filename):
            flash("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.", "error")
        else:
            filename = secure_filename(file.filename)
            if not filename:
                ext = os.path.splitext(file.filename)[1].lower()
                if ext not in ['.pdf', '.doc', '.docx', '.ppt', '.pptx', '.txt', '.zip', '.jpg', '.jpeg', '.png',
                               '.mp4']:
                    ext = '.bin'
                filename = f"upload_{uuid.uuid4().hex}{ext}"

            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            counter = 1
            base, ext = os.path.splitext(filename)
            while os.path.exists(filepath):
                filename = f"{base}_{counter}{ext}"
                filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                counter += 1

            try:
                file.save(filepath)
            except Exception as e:
                flash(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}", "error")
                return redirect(url_for('teacher_upload'))

            lessons = load_lessons()
            lessons.append({
                "id": len(lessons) + 1,
                "title": title,
                "description": description,
                "subject": subject,
                "filename": filename,
                "downloads": 0
            })
            try:
                save_lessons(lessons)
            except Exception as e:
                flash(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}", "error")
                return redirect(url_for('teacher_upload'))

            flash("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", "success")
            return redirect(url_for('teacher_upload'))

    lessons = load_lessons()
    lessons_html = ""
    if lessons:
        for lesson in lessons:
            file_type = get_file_type(lesson['filename'])
            view_url = url_for('view_file', filename=lesson['filename']) if file_type in ['pdf', 'text',
                                                                                          'image'] else '#'
            lessons_html += f'''
            <div class="card">
                <div style="font-size: 20px; font-weight: 500;">{lesson["title"]}</div>
                <div style="color: var(--text-light); margin: 8px 0;">{lesson.get("subject", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")}</div>
                <div style="display: flex; gap: 10px; flex-wrap: wrap; margin-top: 12px;">
                    <a href="{url_for('download_file', filename=lesson['filename'])}" class="btn btn-download">üì• –°–∫–∞—á–∞—Ç—å</a>
                    {'<a href="' + view_url + '" class="btn" target="_blank">üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å</a>' if file_type in ['pdf', 'text', 'image'] else ''}
                    <form method="POST" action="{url_for('delete_lesson', lesson_id=lesson['id'])}" 
                          onsubmit="return confirm('–£–¥–∞–ª–∏—Ç—å?');">
                        <button type="submit" class="btn" style="background: var(--error);">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                    </form>
                </div>
            </div>
            '''
    else:
        lessons_html = '<p style="text-align: center; color: var(--text-light);">–ù–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.</p>'

    content = f'''
    <div style="text-align: right; margin-bottom: 16px;">
        –ü—Ä–∏–≤–µ—Ç, {session.get("teacher_name")}! 
        <a href="/logout" style="color: var(--error);">–í—ã–π—Ç–∏</a> | 
        <a href="/export" class="btn" style="background: #fbbc04; color: black; padding: 6px 12px;">üì¶ –≠–∫—Å–ø–æ—Ä—Ç ZIP</a>
    </div>

    <div class="card">
        <h2>‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª</h2>
        <form method="POST" enctype="multipart/form-data">
            <div style="margin-bottom: 16px;">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                <input type="text" name="title" class="form-control" required>
            </div>
            <div style="margin-bottom: 16px;">
                <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea name="description" class="form-control" rows="2" required></textarea>
            </div>
            <div style="margin-bottom: 16px;">
                <label>–ü—Ä–µ–¥–º–µ—Ç</label>
                <input type="text" name="subject" class="form-control" placeholder="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –†—É—Å—Å–∫–∏–π –∏ —Ç.–¥." required>
            </div>
            <div style="margin-bottom: 16px;">
                <label>–§–∞–π–ª</label>
                <input type="file" name="file" class="form-control" accept=".pdf,.doc,.docx,.ppt,.pptx,.txt,.zip,.jpg,.png,.mp4" required>
            </div>
            <button type="submit" class="btn">üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å</button>
        </form>
    </div>

    <h2 style="margin: 30px 0 16px; color: var(--primary-dark);">üìÅ –í–∞—à–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</h2>
    {lessons_html}
    '''
    return render_page("‚ûï –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", content)


# === –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ ===
@app.route('/delete/<int:lesson_id>', methods=['POST'])
@teacher_required
def delete_lesson(lesson_id):
    lessons = load_lessons()
    lesson_to_delete = None
    for lesson in lessons:
        if lesson.get('id') == lesson_id:
            lesson_to_delete = lesson
            break

    if not lesson_to_delete:
        flash("‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", "error")
        return redirect(url_for('teacher_upload'))

    filepath = os.path.join(app.config['UPLOAD_FOLDER'], lesson_to_delete['filename'])
    try:
        if os.path.exists(filepath):
            os.remove(filepath)
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

    lessons = [lesson for lesson in lessons if lesson.get('id') != lesson_id]
    try:
        save_lessons(lessons)
        flash("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª—ë–Ω!", "success")
    except Exception as e:
        flash(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", "error")

    return redirect(url_for('teacher_upload'))


# === –≠–∫—Å–ø–æ—Ä—Ç –≤ ZIP ===
@app.route('/export')
@teacher_required
def export_all():
    zip_path = os.path.join(UPLOAD_FOLDER, 'library_export.zip')
    try:
        with zipfile.ZipFile(zip_path, 'w') as zipf:
            for root, dirs, files in os.walk(UPLOAD_FOLDER):
                for file in files:
                    if file == 'library_export.zip':
                        continue
                    full_path = os.path.join(root, file)
                    arcname = os.path.relpath(full_path, UPLOAD_FOLDER)
                    zipf.write(full_path, arcname)
        return send_file(zip_path, as_attachment=True)
    except Exception as e:
        flash(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}", "error")
        return redirect(url_for('teacher_upload'))


# === –í—ã—Ö–æ–¥ ===
@app.route('/logout')
def logout():
    session.pop('teacher_logged_in', None)
    session.pop('teacher_name', None)
    flash("üëã –í—ã –≤—ã—à–ª–∏.", "success")
    return redirect(url_for('index'))


# === –ó–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)